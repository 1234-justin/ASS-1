# Reversi AI

import random
import time
import copy



board = [[" ", " ", " ", " ", " ", " ", " ", " "],
         [" ", " ", " ", " ", " ", " ", " ", " "],
         [" ", " ", " ", " ", " ", " ", " ", " "],
         [" ", " ", " ", "○", "●", " ", " ", " "],
         [" ", " ", " ", "●", "○", " ", " ", " "],
         [" ", " ", " ", " ", " ", " ", " ", " "],
         [" ", " ", " ", " ", " ", " ", " ", " "],
         [" ", " ", " ", " ", " ", " ", " ", " "]]

def display(board):
    """Prints out a formatted version of board."""
    print("-----------------")
    for row in board:
        row_string = "|"
        for space in row:
            row_string += space + "|" 
        print(row_string)
        print("-----------------")

def on_board(x, y):
    """Returns True if the position at (x, y) is on the board."""
    return 0 <= x <= 7 and 0 <= y <= 7

def next_player(player):
    """Returns the piece of the next player to play)"""
    if player == "●":
        return "○"
    else:
        return "●"

def play(board, piece, x, y):
    """If playing at (x, y) is legal, plays piece there and returns True.
       Otherwise leaves board unchanged and returns False."""
    if board[y][x] != " ":
        return False
    pieces_to_flip = []
    # 8 directions to check for flipping other player's pieces
    directions = [(1, 0), (1, 1), (0, 1), (-1, 1),
                  (-1, 0), (-1, -1), (0, -1), (1, -1)]
    for i, j in directions:
        x_now = x+i
        y_now = y+j
        pieces_to_add = []
        # Continue in direction while you encounter other player's pieces
        while on_board(x_now, y_now) and board[y_now][x_now] not in [piece, " "]:
            pieces_to_add.append((x_now, y_now))
            x_now += i
            y_now += j
        # If next piece is your own, flip all pieces in between
        if on_board(x_now, y_now) and board[y_now][x_now] == piece:
            pieces_to_flip += pieces_to_add
    # Move is legal if any pieces are flipped
    if pieces_to_flip != []:
        board[y][x] = piece
        for i, j in pieces_to_flip:
            board[j][i] = piece

# -----------------------
# Your functions to write
# -----------------------

def evaluate(board):
   score = 0
   for i in range(8):
       for j in range(8):
           if board[i][j] == "●":
               score += 1
           elif board[i][j] == "○":
                score -= 1
   return score

def new_evaluate(board):
    score = 0
    corners = [(0,0), (0,7), (7,0), (7,7)]
    edges = [(0,1), (0,6), (1,0), (1,7), (6,0), (6,7), (7,1), (7,6)]

    black_count = 0
    white_count = 0
    for i in range(8):
        for j in range(8):
            if board[i][j] == "●":
                black_count += 1
            elif board[i][j] == "○":
                white_count += 1

    score += black_count - white_count


    for corner in corners:
        if board[corner[0]][corner[1]] == "●":
            score += 5
        elif board[corner[0]][corner[1]] == "○":
            score -= 5

    for edge in edges:
        if board[edge[0]][edge[1]] == "●":
            score += 2
        elif board[edge[0]][edge[1]] == "○":
            score -= 2

    return score


    #Returns an evaluation of the board.
       #A score of zero indicates a neutral position.
       #A positive score indicates that black is winning.
      # A negative score indicates that white is winning.

def max_moves(board, player):
    """Returns a list of tuples (x, y) representing the moves that maximize
    the evaluation score for the given player."""
    best_moves = []
    best_score = -float('inf')
    for i in range(8):
        for j in range(8):
            if board[j][i] == " ":
                new_board = copy.deepcopy(board)
                play(new_board, player, i, j)
                score = evaluate(new_board)
                if score > best_score:
                    best_moves = [(i, j)]
                    best_score = score
                elif score == best_score:
                    best_moves = [(i, j)]
    return best_moves




def minimax_moves(board, player):
    """Returns a list of tuples (x, y) representing the moves that give
       the opposing player the worst possible evaluation score for the
       best of their next moves."""
    best_moves = []
    best_score = float('inf')
    for i in range(8):
         for j in range(8):
            if board[j][i] == " ":
                new_board = copy.deepcopy(board)
                play(new_board, player, i, j)
                opponent = next_player(player)
                opponent_best_score = -float('inf')
                for x in range(8):
                    for y in range(8):
                        if new_board[y][x] == " ":
                            opponent_board = copy.deepcopy(new_board)
                            play(opponent_board, opponent, x, y)
                            opponent_score = new_evaluate(opponent_board)
                            opponent_best_score = max(opponent_best_score, opponent_score)
                if opponent_best_score < best_score:
                    best_moves = [(i, j)]
                    best_score = opponent_best_score
                elif opponent_best_score == best_score:
                    best_moves = [(i, j)]
    return best_moves

   
# -----------------------
# -----------------------

current_player = "●"
while True:
    display(board)
    if current_player == "●":
        moves = max_moves(board, current_player)
        print(moves)
    else:
        moves = minimax_moves(board, current_player)
        print(moves)
        
    if moves == []:
        print("No more valid move, game end.")
        print(evaluate(board))
        if evaluate(board) > 0:
            print("Good job")
            
        elif evaluate(board) < 0:
            print("Nice try, you may win next time.")
        else:
            print("Seems like we tied.")
        break
    else:
        # Play a randm move from the best moves
        x, y = random.choice(moves)
        play(board, current_player, x, y)
        current_player = next_player(current_player)
        time.sleep(0.5)
        
